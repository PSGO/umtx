name: Daily PS5 UMTX Jailbreak Monitor

on:
  schedule:
    - cron: '0 * * * *'  # 每小时执行一次
  workflow_dispatch:  # 允许手动触发

jobs:
  check_and_process_ps5_umtx:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Create log directory if it doesn't exist
      - name: Create log directory
        run: mkdir -p log

      # Step 3: Get the latest commit hash from GitHub
      - name: Get the latest commit hash from GitHub
        id: get_commit
        run: |
          latest_commit=$(curl -s https://api.github.com/repos/idlesauce/PS5-UMTX-Jailbreak/commits/main | jq -r '.sha')
          echo "Latest commit hash: $latest_commit"
          echo $latest_commit > log/latest_commit.txt

      # Step 4: Get the latest commit message from GitHub

      # Step 5: Ensure previous_commit.txt exists and initialize if necessary
      - name: Ensure previous_commit.txt exists
        run: |
          if [ ! -f log/previous_commit.txt ]; then
            echo "no_previous_commit" > log/previous_commit.txt
          fi

      # Step 6: Compare latest commit with previous commit and set skip variable
      - name: Compare with previous commit and set skip variable
        id: check_commit
        run: |
          latest_commit=$(cat log/latest_commit.txt)
          previous_commit=$(cat log/previous_commit.txt)
          if [ "$latest_commit" == "$previous_commit" ]; then
            echo "skip=true" >> $GITHUB_ENV
          else
            echo "skip=false" >> $GITHUB_ENV
          fi

      # Step 8: Download repository archive if skip is not true
      - name: Download repository archive
        if: ${{ env.skip != 'true' }}
        run: curl -L https://github.com/idlesauce/PS5-UMTX-Jailbreak/archive/refs/heads/main.zip -o repo.zip

      # Step 9: Unzip repository archive
      - name: Unzip repository archive
        if: ${{ env.skip != 'true' }}
        run: unzip -q repo.zip

      # Step 10: Download etaHEN old version bin file
      - name: Get previous version tag from GitHub Download etaHEN old version bin file
        if: ${{ env.skip != 'true' }}
        run: |
          # 获取 GitHub 上的发布信息
          releases=$(curl -s https://api.github.com/repos/etaHEN/etaHEN/releases)

          # 输出 API 响应内容来检查
          #echo "Releases API response: $releases"

          # 允许用户配置多个排除关键字（用 | 分隔）
          EXCLUDE_PATTERNS="test|beta|alpha"

          # 获取所有 tag，并根据 EXCLUDE_PATTERNS 进行过滤（忽略大小写）
          tags=$(echo "$releases" | jq -r '.[].tag_name' | grep -Evi "$EXCLUDE_PATTERNS")

          # 获取前两个有效的 tag
          latest_tag=$(echo "$tags" | sed -n '1p')
          previous_tag=$(echo "$tags" | sed -n '2p')

          # 输出调试信息
          echo "latest_tag=$latest_tag"
          echo "previous_tag=$previous_tag"

          # 确保 previous_tag 有值
          if [ -z "$previous_tag" ]; then
            echo "Error: previous_tag is empty. Exiting."
            exit 1
          fi

          # 将 previous_tag 设置为环境变量
          echo "previous_tag=$previous_tag" >> $GITHUB_ENV
          
          # 检查 previous_tag 是否有效
          if [ -z "$previous_tag" ]; then
            echo "Error: Unable to retrieve the previous tag"
            exit 1
          fi

          # 获取与 previous_tag 相关的 bin 文件下载链接，注意未来可能有多个bin文件也可能是压缩文件
          bin_file_url=$(curl -s https://api.github.com/repos/etaHEN/etaHEN/releases/tags/$previous_tag | jq -r '.assets[] | select(.name | test("etahen"; "i") and (test("toolbox"; "i") | not) and endswith(".bin")) | .browser_download_url')

          # 输出下载链接以供调试
          echo "bin_file_url=$bin_file_url"

          # 如果 bin 文件链接为空，提示错误
          if [ -z "$bin_file_url" ]; then
            echo "Error: Unable to find the .bin file for the tag $previous_tag"
            exit 1
          fi

          # 下载 etaHEN old bin 文件
          curl -L $bin_file_url -o etaHENold.bin

          # 移动文件到指定目录
          mv etaHENold.bin PS5-UMTX-Jailbreak-main/document/en/ps5/payloads/

      # Step 11: Modify payload_map.js with previous tag
      - name: Modify payload_map.js with previous tag
        if: ${{ env.skip != 'true' }}
        run: |
          version="${{ env.previous_tag }}"  # 获取之前设置的环境变量
          echo "version=$version"  # 输出调试信息
          
          # 将 py 脚本从主目录复制到目标目录
          cp custom.py PS5-UMTX-Jailbreak-main/document/en/ps5/
          cp custom_cn.py PS5-UMTX-Jailbreak-main/document/en/ps5/

          # 执行修改脚本&中文
          python3 PS5-UMTX-Jailbreak-main/document/en/ps5/custom.py $version  
          python3 PS5-UMTX-Jailbreak-main/document/en/ps5/custom_cn.py

      # Step 12: Modify appcache_manifest_generator.py
      - name: Modify appcache_manifest_generator.py
        if: ${{ env.skip != 'true' }}
        run: |
          sed -i '/user_input = input(f"Found .index.html./,/exit(1)/d' PS5-UMTX-Jailbreak-main/appcache_manifest_generator.py

      # Step 13: Run appcache_manifest_generator.py
      - name: Run appcache_manifest_generator.py
        if: ${{ env.skip != 'true' }}
        run: |
          cd PS5-UMTX-Jailbreak-main
          python3 appcache_manifest_generator.py

      # Step 14: Clean up main branch


      # Step 15: Copy files from PS5-UMTX-Jailbreak-main/document/en/ps5 to main
      - name: Copy files to main
        if: ${{ env.skip != 'true' }}
        run: |
          # Ensure the directory exists
          if [ ! -d "PS5-UMTX-Jailbreak-main/document/en/ps5" ]; then
            echo "Error: Directory PS5-UMTX-Jailbreak-main/document/en/ps5 does not exist."
            exit 1
          fi

          cp -r PS5-UMTX-Jailbreak-main/document/en/ps5/* ./

      # Step 16: Delete repo.zip and PS5-UMTX-Jailbreak-main
      - name: Delete repo.zip and PS5-UMTX-Jailbreak-main
        if: ${{ env.skip != 'true' }}
        run: rm -rf repo.zip PS5-UMTX-Jailbreak-main

      # 检测并打印剩余配额
      - name: Check GitHub API Rate Limit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -s -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/rate_limit | jq '.rate | "Limit: \(.limit), Remaining: \(.remaining), Reset: \(.reset)"'    

      # Step 17: Update commit hash log and push changes
      - name: Commit and push commit info to log directory
        if: ${{ env.skip != 'true' }}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          echo "$(cat log/latest_commit.txt)" > log/previous_commit.txt
          git add log/previous_commit.txt log/latest_commit.txt
          git add .  # Add the newly copied files
          git commit -m "Bot"
          git push origin main
